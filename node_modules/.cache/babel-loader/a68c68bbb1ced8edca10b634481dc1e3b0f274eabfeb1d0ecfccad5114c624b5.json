{"ast":null,"code":"var _jsxFileName = \"/Users/timurinamkhojayev/Desktop/demo-crypto/order-ui/src/components/user/TransactionsList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Segment, Header, Message, List, Icon } from 'semantic-ui-react';\nimport { useAuth } from '../context/AuthContext';\nimport { backApi } from '../misc/BackApi';\nimport { handleLogError } from '../misc/Helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsList = () => {\n  _s();\n  const {\n    getUser\n  } = useAuth();\n  const [transactions, setTransactions] = useState([]);\n  const [usernames, setUsernames] = useState({});\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchTransactions = async () => {\n      try {\n        const user = getUser();\n        const response = await backApi.getAllTransactions(user);\n        setTransactions(response.data);\n        const usernamesMap = {};\n        for (const transaction of response.data) {\n          if (!usernamesMap[transaction.fromWalletId]) {\n            const fromUser = await backApi.getUserById(transaction.fromWalletId, user);\n            usernamesMap[transaction.fromWalletId] = fromUser.username;\n          }\n          if (!usernamesMap[transaction.toWalletId]) {\n            const toUser = await backgetUserById(transaction.toWalletId, user);\n            usernamesMap[transaction.toWalletId] = toUser.username;\n          }\n        }\n        setUsernames(usernamesMap);\n      } catch (error) {\n        handleLogError(error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTransactions();\n  }, [getUser]);\n  if (loading) return /*#__PURE__*/_jsxDEV(Message, {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Message, {\n    negative: true,\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Segment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h3\",\n        children: \"All Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), transactions.length === 0 ? /*#__PURE__*/_jsxDEV(Message, {\n        children: \"No transactions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(List, {\n        divided: true,\n        relaxed: true,\n        children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: getUser().id === transaction.fromWalletId ? 'arrow up' : 'arrow down',\n            color: \"red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n            children: [getUser().id === transaction.fromWalletId ? /*#__PURE__*/_jsxDEV(List.Header, {\n              children: [\"To: \", usernames[transaction.toWalletId]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(List.Header, {\n              children: [\"From: \", usernames[transaction.fromWalletId]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(List.Description, {\n              children: [\"Amount: \", transaction.amount, \" \", transaction.currency]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(List.Description, {\n              children: [\"Type: \", transaction.transactionType]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(List.Description, {\n              children: [\"Date: \", new Date(transaction.timestamp).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this)]\n        }, transaction.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(TransactionsList, \"yhrtc6AuuDlwpUcM7bapUbg5gx4=\", false, function () {\n  return [useAuth];\n});\n_c = TransactionsList;\nexport default TransactionsList;\nvar _c;\n$RefreshReg$(_c, \"TransactionsList\");","map":{"version":3,"names":["React","useState","useEffect","Container","Segment","Header","Message","List","Icon","useAuth","backApi","handleLogError","jsxDEV","_jsxDEV","TransactionsList","_s","getUser","transactions","setTransactions","usernames","setUsernames","error","setError","loading","setLoading","fetchTransactions","user","response","getAllTransactions","data","usernamesMap","transaction","fromWalletId","fromUser","getUserById","username","toWalletId","toUser","backgetUserById","message","children","fileName","_jsxFileName","lineNumber","columnNumber","negative","as","length","divided","relaxed","map","Item","name","id","color","Content","Description","amount","currency","transactionType","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/timurinamkhojayev/Desktop/demo-crypto/order-ui/src/components/user/TransactionsList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Segment, Header, Message, List, Icon } from 'semantic-ui-react';\nimport { useAuth } from '../context/AuthContext';\nimport { backApi } from '../misc/BackApi';\nimport { handleLogError} from '../misc/Helpers';\n\nconst TransactionsList = () => {\n    const { getUser } = useAuth();\n    const [transactions, setTransactions] = useState([]);\n    const [usernames, setUsernames] = useState({});\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchTransactions = async () => {\n            try {\n                const user = getUser();\n                const response = await backApi.getAllTransactions(user);\n                setTransactions(response.data);\n\n                const usernamesMap = {};\n                for (const transaction of response.data) {\n                    if (!usernamesMap[transaction.fromWalletId]) {\n                        const fromUser = await backApi.getUserById(transaction.fromWalletId, user);\n                        usernamesMap[transaction.fromWalletId] = fromUser.username;\n                    }\n                    if (!usernamesMap[transaction.toWalletId]) {\n                        const toUser = await backgetUserById(transaction.toWalletId, user);\n                        usernamesMap[transaction.toWalletId] = toUser.username;\n                    }\n                }\n                setUsernames(usernamesMap);\n            } catch (error) {\n                handleLogError(error);\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchTransactions();\n    }, [getUser]);\n\n    if (loading) return <Message>Loading...</Message>;\n    if (error) return <Message negative>Error: {error}</Message>;\n\n    return (\n        <Container>\n            <Segment>\n                <Header as=\"h3\">All Transactions</Header>\n                {transactions.length === 0 ? (\n                    <Message>No transactions found.</Message>\n                ) : (\n                    <List divided relaxed>\n                        {transactions.map(transaction => (\n                            <List.Item key={transaction.id}>\n                                <Icon name={getUser().id === transaction.fromWalletId ? 'arrow up' : 'arrow down'} color='red' />\n                                <List.Content>\n                                    {getUser().id === transaction.fromWalletId ? (\n                                        <List.Header>To: {usernames[transaction.toWalletId]}</List.Header>\n                                    ) : (\n                                        <List.Header>From: {usernames[transaction.fromWalletId]}</List.Header>\n                                    )}\n                                    <List.Description>\n                                        Amount: {transaction.amount} {transaction.currency}\n                                    </List.Description>\n                                    <List.Description>\n                                        Type: {transaction.transactionType}\n                                    </List.Description>\n                                    <List.Description>\n                                        Date: {new Date(transaction.timestamp).toLocaleString()}\n                                    </List.Description>\n                                </List.Content>\n                            </List.Item>\n                        ))}\n                    </List>\n                )}\n            </Segment>\n        </Container>\n    );\n};\n\nexport default TransactionsList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import React, { useState, useRef, useEffect } from 'react';\n// import { Container, Message, Segment, Header, Button } from 'semantic-ui-react';\n// import jsQR from 'jsqr';\n// import { useAuth } from '../context/AuthContext';\n// import { backApi } from '../misc/BackApi';\n// import { handleLogError } from '../misc/Helpers';\n// import { useNavigate } from 'react-router-dom';\n//\n// const ScanQR = () => {\n//     const { getUser } = useAuth();\n//     const navigate = useNavigate();\n//     const [error, setError] = useState(null);\n//     const [transactionDetails, setTransactionDetails] = useState(null);\n//     const [scanning, setScanning] = useState(false);\n//     const videoRef = useRef(null);\n//\n//     const handleScanQR = () => {\n//         setScanning(true);\n//         setError(null);\n//         setTransactionDetails(null);\n//     };\n//\n//     useEffect(() => {\n//         handleScanQR();\n//     }, []);\n//\n//     useEffect(() => {\n//         if (scanning) {\n//             const canvas = document.createElement('canvas');\n//             const context = canvas.getContext('2d');\n//             const video = videoRef.current;\n//\n//             navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } }).then(stream => {\n//                 video.srcObject = stream;\n//                 video.setAttribute('playsinline', true);\n//                 video.play();\n//\n//                 const scan = () => {\n//                     if (video.readyState === video.HAVE_ENOUGH_DATA) {\n//                         canvas.height = video.videoHeight;\n//                         canvas.width = video.videoWidth;\n//                         context.drawImage(video, 0, 0, canvas.width, canvas.height);\n//\n//                         const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n//                         const code = jsQR(imageData.data, imageData.width, imageData.height);\n//\n//                         if (code) {\n//                             try {\n//                                 const transactionData = JSON.parse(code.data);\n//                                 setTransactionDetails(transactionData);\n//                                 stream.getTracks().forEach(track => track.stop());\n//                                 setScanning(false);\n//                                 navigate('/confirm-transaction', { state: { transactionDetails: transactionData } });\n//                             } catch (e) {\n//                                 setError('Failed to parse QR code data');\n//                             }\n//                         }\n//                     }\n//                     if (scanning) {\n//                         requestAnimationFrame(scan);\n//                     }\n//                 };\n//                 scan();\n//             }).catch(err => setError(err.message));\n//         }\n//     }, [scanning, navigate]);\n//\n//     const handleBack = () => {\n//         navigate(-1); // Go back to the previous page\n//     };\n//\n//     return (\n//         <Container>\n//             <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'auto' }}>\n//                 {scanning && (\n//                     <div style={{ border: '2px solid #7F00FF', padding: '25px', borderRadius: '15px' }}>\n//                         <video ref={videoRef} style={{ width: '400px', height: 'auto', borderRadius: '10px' }} />\n//                     </div>\n//                 )}\n//             </div>\n//             <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}>\n//                 <Button color='violet' onClick={handleBack}>Отменить</Button>\n//             </div>\n//             {error && <Message negative>{error}</Message>}\n//             {transactionDetails && (\n//                 <Segment>\n//                     <Header as=\"h3\">Transaction Details</Header>\n//                     <p><strong>To Username:</strong> {transactionDetails.toUsername}</p>\n//                     <p><strong>Amount:</strong> {transactionDetails.amount}</p>\n//                     <p><strong>Currency:</strong> {transactionDetails.currency}</p>\n//                     <Button color='violet' onClick={() => navigate('/confirm-transaction', { state: { transactionDetails } })}>Confirm Transaction</Button>\n//                 </Segment>\n//             )}\n//         </Container>\n//     );\n// };\n//\n// export default ScanQR;\nimport React,{useState,useRef}from'react';import{Container,Message,Segment,Header,Button}from'semantic-ui-react';import QrScanner from'react-qr-scanner';import{useAuth}from'../context/AuthContext';import{useNavigate}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ScanQR=()=>{const{getUser}=useAuth();const navigate=useNavigate();const[error,setError]=useState(null);const[transactionDetails,setTransactionDetails]=useState(null);const[scanning,setScanning]=useState(true);const handleScan=data=>{if(data){try{const transactionData=JSON.parse(data.text);setTransactionDetails(transactionData);setScanning(false);navigate('/confirm-transaction',{state:{transactionDetails:transactionData}});}catch(e){setError('Failed to parse QR code data');}}};const handleError=err=>{setError(err.message);};const handleBack=()=>{navigate(-1);// Go back to the previous page\n};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',height:'auto'},children:scanning&&/*#__PURE__*/_jsx(\"div\",{style:{border:'2px solid #7F00FF',padding:'25px',borderRadius:'15px'},children:/*#__PURE__*/_jsx(QrScanner,{delay:300,onError:handleError,onScan:handleScan,style:{width:'400px',height:'auto',borderRadius:'10px'}})})}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',marginTop:'10px'},children:/*#__PURE__*/_jsx(Button,{color:\"violet\",onClick:handleBack,children:\"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"})}),error&&/*#__PURE__*/_jsx(Message,{negative:true,children:error}),transactionDetails&&/*#__PURE__*/_jsxs(Segment,{children:[/*#__PURE__*/_jsx(Header,{as:\"h3\",children:\"Transaction Details\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"To Username:\"}),\" \",transactionDetails.toUsername]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Amount:\"}),\" \",transactionDetails.amount]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Currency:\"}),\" \",transactionDetails.currency]}),/*#__PURE__*/_jsx(Button,{color:\"violet\",onClick:()=>navigate('/confirm-transaction',{state:{transactionDetails}}),children:\"Confirm Transaction\"})]})]});};export default ScanQR;","map":{"version":3,"names":["React","useState","useRef","Container","Message","Segment","Header","Button","QrScanner","useAuth","useNavigate","jsx","_jsx","jsxs","_jsxs","ScanQR","getUser","navigate","error","setError","transactionDetails","setTransactionDetails","scanning","setScanning","handleScan","data","transactionData","JSON","parse","text","state","e","handleError","err","message","handleBack","children","style","display","justifyContent","alignItems","height","border","padding","borderRadius","delay","onError","onScan","width","marginTop","color","onClick","negative","as","toUsername","amount","currency"],"sources":["/Users/timurinamkhojayev/Desktop/demo-crypto/order-ui/src/components/user/ScanQR.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import { Container, Message, Segment, Header, Button } from 'semantic-ui-react';\n// import jsQR from 'jsqr';\n// import { useAuth } from '../context/AuthContext';\n// import { backApi } from '../misc/BackApi';\n// import { handleLogError } from '../misc/Helpers';\n// import { useNavigate } from 'react-router-dom';\n//\n// const ScanQR = () => {\n//     const { getUser } = useAuth();\n//     const navigate = useNavigate();\n//     const [error, setError] = useState(null);\n//     const [transactionDetails, setTransactionDetails] = useState(null);\n//     const [scanning, setScanning] = useState(false);\n//     const videoRef = useRef(null);\n//\n//     const handleScanQR = () => {\n//         setScanning(true);\n//         setError(null);\n//         setTransactionDetails(null);\n//     };\n//\n//     useEffect(() => {\n//         handleScanQR();\n//     }, []);\n//\n//     useEffect(() => {\n//         if (scanning) {\n//             const canvas = document.createElement('canvas');\n//             const context = canvas.getContext('2d');\n//             const video = videoRef.current;\n//\n//             navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } }).then(stream => {\n//                 video.srcObject = stream;\n//                 video.setAttribute('playsinline', true);\n//                 video.play();\n//\n//                 const scan = () => {\n//                     if (video.readyState === video.HAVE_ENOUGH_DATA) {\n//                         canvas.height = video.videoHeight;\n//                         canvas.width = video.videoWidth;\n//                         context.drawImage(video, 0, 0, canvas.width, canvas.height);\n//\n//                         const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n//                         const code = jsQR(imageData.data, imageData.width, imageData.height);\n//\n//                         if (code) {\n//                             try {\n//                                 const transactionData = JSON.parse(code.data);\n//                                 setTransactionDetails(transactionData);\n//                                 stream.getTracks().forEach(track => track.stop());\n//                                 setScanning(false);\n//                                 navigate('/confirm-transaction', { state: { transactionDetails: transactionData } });\n//                             } catch (e) {\n//                                 setError('Failed to parse QR code data');\n//                             }\n//                         }\n//                     }\n//                     if (scanning) {\n//                         requestAnimationFrame(scan);\n//                     }\n//                 };\n//                 scan();\n//             }).catch(err => setError(err.message));\n//         }\n//     }, [scanning, navigate]);\n//\n//     const handleBack = () => {\n//         navigate(-1); // Go back to the previous page\n//     };\n//\n//     return (\n//         <Container>\n//             <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'auto' }}>\n//                 {scanning && (\n//                     <div style={{ border: '2px solid #7F00FF', padding: '25px', borderRadius: '15px' }}>\n//                         <video ref={videoRef} style={{ width: '400px', height: 'auto', borderRadius: '10px' }} />\n//                     </div>\n//                 )}\n//             </div>\n//             <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}>\n//                 <Button color='violet' onClick={handleBack}>Отменить</Button>\n//             </div>\n//             {error && <Message negative>{error}</Message>}\n//             {transactionDetails && (\n//                 <Segment>\n//                     <Header as=\"h3\">Transaction Details</Header>\n//                     <p><strong>To Username:</strong> {transactionDetails.toUsername}</p>\n//                     <p><strong>Amount:</strong> {transactionDetails.amount}</p>\n//                     <p><strong>Currency:</strong> {transactionDetails.currency}</p>\n//                     <Button color='violet' onClick={() => navigate('/confirm-transaction', { state: { transactionDetails } })}>Confirm Transaction</Button>\n//                 </Segment>\n//             )}\n//         </Container>\n//     );\n// };\n//\n// export default ScanQR;\nimport React, { useState, useRef } from 'react';\nimport { Container, Message, Segment, Header, Button } from 'semantic-ui-react';\nimport QrScanner from 'react-qr-scanner';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n\nconst ScanQR = () => {\n    const { getUser } = useAuth();\n    const navigate = useNavigate();\n    const [error, setError] = useState(null);\n    const [transactionDetails, setTransactionDetails] = useState(null);\n    const [scanning, setScanning] = useState(true);\n\n    const handleScan = data => {\n        if (data) {\n            try {\n                const transactionData = JSON.parse(data.text);\n                setTransactionDetails(transactionData);\n                setScanning(false);\n                navigate('/confirm-transaction', { state: { transactionDetails: transactionData } });\n            } catch (e) {\n                setError('Failed to parse QR code data');\n            }\n        }\n    };\n\n    const handleError = err => {\n        setError(err.message);\n    };\n\n    const handleBack = () => {\n        navigate(-1); // Go back to the previous page\n    };\n\n    return (\n        <Container>\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'auto' }}>\n                {scanning && (\n                    <div style={{ border: '2px solid #7F00FF', padding: '25px', borderRadius: '15px' }}>\n                        <QrScanner\n                            delay={300}\n                            onError={handleError}\n                            onScan={handleScan}\n                            style={{ width: '400px', height: 'auto', borderRadius: '10px' }}\n                        />\n                    </div>\n                )}\n            </div>\n            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}>\n                <Button color='violet' onClick={handleBack}>Отменить</Button>\n            </div>\n            {error && <Message negative>{error}</Message>}\n            {transactionDetails && (\n                <Segment>\n                    <Header as=\"h3\">Transaction Details</Header>\n                    <p><strong>To Username:</strong> {transactionDetails.toUsername}</p>\n                    <p><strong>Amount:</strong> {transactionDetails.amount}</p>\n                    <p><strong>Currency:</strong> {transactionDetails.currency}</p>\n                    <Button color='violet' onClick={() => navigate('/confirm-transaction', { state: { transactionDetails } })}>Confirm Transaction</Button>\n                </Segment>\n            )}\n        </Container>\n    );\n};\n\nexport default ScanQR;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
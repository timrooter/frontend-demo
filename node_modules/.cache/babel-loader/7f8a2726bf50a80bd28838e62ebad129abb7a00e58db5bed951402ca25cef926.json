{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Container,Segment,Header,Message,List,Icon}from'semantic-ui-react';import{useAuth}from'../context/AuthContext';import{backApi}from'../misc/BackApi';import{handleLogError}from'../misc/Helpers';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TransactionsList=()=>{const{getUser}=useAuth();const[transactions,setTransactions]=useState([]);const[usernames,setUsernames]=useState({});const[error,setError]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{const fetchTransactions=async()=>{try{const user=getUser();const response=await backApi.getAllTransactions(user);setTransactions(response.data);const usernamesMap={};for(const transaction of response.data){if(!usernamesMap[transaction.fromWalletId]){const fromUser=await backApi.getUserById(transaction.fromWalletId,user);usernamesMap[transaction.fromWalletId]=fromUser.data.username;}if(!usernamesMap[transaction.toWalletId]){const toUser=await backApi.getUserById(transaction.toWalletId,user);usernamesMap[transaction.toWalletId]=toUser.data.username;}}setUsernames(usernamesMap);}catch(error){handleLogError(error);setError(error.message);}finally{setLoading(false);}};fetchTransactions();},[getUser]);if(loading)return/*#__PURE__*/_jsx(Message,{children:\"Loading...\"});if(error)return/*#__PURE__*/_jsxs(Message,{negative:true,children:[\"Error: \",error]});return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsxs(Segment,{children:[/*#__PURE__*/_jsx(Header,{as:\"h3\",children:\"All Transactions\"}),transactions.length===0?/*#__PURE__*/_jsx(Message,{children:\"No transactions found.\"}):/*#__PURE__*/_jsx(List,{divided:true,relaxed:true,children:transactions.map(transaction=>/*#__PURE__*/_jsxs(List.Item,{children:[/*#__PURE__*/_jsx(Icon,{name:\"exchange\",color:\"red\"}),/*#__PURE__*/_jsxs(List.Content,{children:[/*#__PURE__*/_jsxs(List.Header,{children:[\"From: \",usernames[transaction.fromWalletId]]}),/*#__PURE__*/_jsxs(List.Header,{children:[\"To: \",usernames[transaction.toWalletId]]}),/*#__PURE__*/_jsxs(List.Description,{children:[\"Amount: \",transaction.amount,\" \",transaction.currency]}),/*#__PURE__*/_jsxs(List.Description,{children:[\"Type: \",transaction.transactionType]}),/*#__PURE__*/_jsxs(List.Description,{children:[\"Date: \",new Date(transaction.timestamp).toLocaleString()]})]})]},transaction.id))})]})});};export default TransactionsList;","map":{"version":3,"names":["React","useState","useEffect","Container","Segment","Header","Message","List","Icon","useAuth","backApi","handleLogError","jsx","_jsx","jsxs","_jsxs","TransactionsList","getUser","transactions","setTransactions","usernames","setUsernames","error","setError","loading","setLoading","fetchTransactions","user","response","getAllTransactions","data","usernamesMap","transaction","fromWalletId","fromUser","getUserById","username","toWalletId","toUser","message","children","negative","as","length","divided","relaxed","map","Item","name","color","Content","Description","amount","currency","transactionType","Date","timestamp","toLocaleString","id"],"sources":["/Users/timurinamkhojayev/Desktop/demo-crypto/order-ui/src/components/user/TransactionsList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Segment, Header, Message, List, Icon } from 'semantic-ui-react';\nimport { useAuth } from '../context/AuthContext';\nimport { backApi } from '../misc/BackApi';\nimport { handleLogError } from '../misc/Helpers';\n\nconst TransactionsList = () => {\n    const { getUser } = useAuth();\n    const [transactions, setTransactions] = useState([]);\n    const [usernames, setUsernames] = useState({});\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchTransactions = async () => {\n            try {\n                const user = getUser();\n                const response = await backApi.getAllTransactions(user);\n                setTransactions(response.data);\n\n                const usernamesMap = {};\n                for (const transaction of response.data) {\n                    if (!usernamesMap[transaction.fromWalletId]) {\n                        const fromUser = await backApi.getUserById(transaction.fromWalletId, user);\n                        usernamesMap[transaction.fromWalletId] = fromUser.data.username;\n                    }\n                    if (!usernamesMap[transaction.toWalletId]) {\n                        const toUser = await backApi.getUserById(transaction.toWalletId, user);\n                        usernamesMap[transaction.toWalletId] = toUser.data.username;\n                    }\n                }\n                setUsernames(usernamesMap);\n            } catch (error) {\n                handleLogError(error);\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchTransactions();\n    }, [getUser]);\n\n    if (loading) return <Message>Loading...</Message>;\n    if (error) return <Message negative>Error: {error}</Message>;\n\n    return (\n        <Container>\n            <Segment>\n                <Header as=\"h3\">All Transactions</Header>\n                {transactions.length === 0 ? (\n                    <Message>No transactions found.</Message>\n                ) : (\n                    <List divided relaxed>\n                        {transactions.map(transaction => (\n                            <List.Item key={transaction.id}>\n                                <Icon name='exchange' color='red' />\n                                <List.Content>\n                                    <List.Header>From: {usernames[transaction.fromWalletId]}</List.Header>\n                                    <List.Header>To: {usernames[transaction.toWalletId]}</List.Header>\n                                    <List.Description>\n                                        Amount: {transaction.amount} {transaction.currency}\n                                    </List.Description>\n                                    <List.Description>\n                                        Type: {transaction.transactionType}\n                                    </List.Description>\n                                    <List.Description>\n                                        Date: {new Date(transaction.timestamp).toLocaleString()}\n                                    </List.Description>\n                                </List.Content>\n                            </List.Item>\n                        ))}\n                    </List>\n                )}\n            </Segment>\n        </Container>\n    );\n};\n\nexport default TransactionsList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
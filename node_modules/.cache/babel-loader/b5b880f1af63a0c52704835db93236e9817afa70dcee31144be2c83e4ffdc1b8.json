{"ast":null,"code":"var _jsxFileName = \"/Users/timurinamkhojayev/Desktop/demo-crypto/order-ui/src/components/user/ScanQR.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from 'react';\n// import { Container, Message, Segment, Header, Button } from 'semantic-ui-react';\n// import jsQR from 'jsqr';\n// import { useAuth } from '../context/AuthContext';\n// import { backApi } from '../misc/BackApi';\n// import { handleLogError } from '../misc/Helpers';\n// import { useNavigate } from 'react-router-dom';\n//\n// const ScanQR = () => {\n//     const { getUser } = useAuth();\n//     const navigate = useNavigate();\n//     const [error, setError] = useState(null);\n//     const [transactionDetails, setTransactionDetails] = useState(null);\n//     const [scanning, setScanning] = useState(false);\n//     const videoRef = useRef(null);\n//\n//     const handleScanQR = () => {\n//         setScanning(true);\n//         setError(null);\n//         setTransactionDetails(null);\n//     };\n//\n//     useEffect(() => {\n//         handleScanQR();\n//     }, []);\n//\n//     useEffect(() => {\n//         if (scanning) {\n//             const canvas = document.createElement('canvas');\n//             const context = canvas.getContext('2d');\n//             const video = videoRef.current;\n//\n//             navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } }).then(stream => {\n//                 video.srcObject = stream;\n//                 video.setAttribute('playsinline', true);\n//                 video.play();\n//\n//                 const scan = () => {\n//                     if (video.readyState === video.HAVE_ENOUGH_DATA) {\n//                         canvas.height = video.videoHeight;\n//                         canvas.width = video.videoWidth;\n//                         context.drawImage(video, 0, 0, canvas.width, canvas.height);\n//\n//                         const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n//                         const code = jsQR(imageData.data, imageData.width, imageData.height);\n//\n//                         if (code) {\n//                             try {\n//                                 const transactionData = JSON.parse(code.data);\n//                                 setTransactionDetails(transactionData);\n//                                 stream.getTracks().forEach(track => track.stop());\n//                                 setScanning(false);\n//                                 navigate('/confirm-transaction', { state: { transactionDetails: transactionData } });\n//                             } catch (e) {\n//                                 setError('Failed to parse QR code data');\n//                             }\n//                         }\n//                     }\n//                     if (scanning) {\n//                         requestAnimationFrame(scan);\n//                     }\n//                 };\n//                 scan();\n//             }).catch(err => setError(err.message));\n//         }\n//     }, [scanning, navigate]);\n//\n//     const handleBack = () => {\n//         navigate(-1); // Go back to the previous page\n//     };\n//\n//     return (\n//         <Container>\n//             <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'auto' }}>\n//                 {scanning && (\n//                     <div style={{ border: '2px solid #7F00FF', padding: '25px', borderRadius: '15px' }}>\n//                         <video ref={videoRef} style={{ width: '400px', height: 'auto', borderRadius: '10px' }} />\n//                     </div>\n//                 )}\n//             </div>\n//             <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}>\n//                 <Button color='violet' onClick={handleBack}>Отменить</Button>\n//             </div>\n//             {error && <Message negative>{error}</Message>}\n//             {transactionDetails && (\n//                 <Segment>\n//                     <Header as=\"h3\">Transaction Details</Header>\n//                     <p><strong>To Username:</strong> {transactionDetails.toUsername}</p>\n//                     <p><strong>Amount:</strong> {transactionDetails.amount}</p>\n//                     <p><strong>Currency:</strong> {transactionDetails.currency}</p>\n//                     <Button color='violet' onClick={() => navigate('/confirm-transaction', { state: { transactionDetails } })}>Confirm Transaction</Button>\n//                 </Segment>\n//             )}\n//         </Container>\n//     );\n// };\n//\n// export default ScanQR;\nimport React, { useState, useRef } from 'react';\nimport { Container, Message, Segment, Header, Button } from 'semantic-ui-react';\nimport QrScanner from 'react-qr-scanner';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScanQR = () => {\n  _s();\n  const {\n    getUser\n  } = useAuth();\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const [transactionDetails, setTransactionDetails] = useState(null);\n  const [scanning, setScanning] = useState(true);\n  const handleScan = data => {\n    if (data) {\n      try {\n        const transactionData = JSON.parse(data.text);\n        setTransactionDetails(transactionData);\n        setScanning(false);\n        navigate('/confirm-transaction', {\n          state: {\n            transactionDetails: transactionData\n          }\n        });\n      } catch (e) {\n        setError('Failed to parse QR code data');\n      }\n    }\n  };\n  const handleError = err => {\n    setError(err.message);\n  };\n  const handleBack = () => {\n    navigate(-1); // Go back to the previous page\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: 'auto'\n      },\n      children: scanning && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '2px solid #7F00FF',\n          padding: '25px',\n          borderRadius: '15px'\n        },\n        children: /*#__PURE__*/_jsxDEV(QrScanner, {\n          delay: 300,\n          onError: handleError,\n          onScan: handleScan,\n          style: {\n            width: '400px',\n            height: 'auto',\n            borderRadius: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"violet\",\n        onClick: handleBack,\n        children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n      negative: true,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 23\n    }, this), transactionDetails && /*#__PURE__*/_jsxDEV(Segment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h3\",\n        children: \"Transaction Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"To Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 24\n        }, this), \" \", transactionDetails.toUsername]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 24\n        }, this), \" \", transactionDetails.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Currency:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 24\n        }, this), \" \", transactionDetails.currency]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"violet\",\n        onClick: () => navigate('/confirm-transaction', {\n          state: {\n            transactionDetails\n          }\n        }),\n        children: \"Confirm Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n_s(ScanQR, \"LctZjXqycRyIgHr//gJfYDA1bDA=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = ScanQR;\nexport default ScanQR;\nvar _c;\n$RefreshReg$(_c, \"ScanQR\");","map":{"version":3,"names":["React","useState","useRef","Container","Message","Segment","Header","Button","QrScanner","useAuth","useNavigate","jsxDEV","_jsxDEV","ScanQR","_s","getUser","navigate","error","setError","transactionDetails","setTransactionDetails","scanning","setScanning","handleScan","data","transactionData","JSON","parse","text","state","e","handleError","err","message","handleBack","children","style","display","justifyContent","alignItems","height","border","padding","borderRadius","delay","onError","onScan","width","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","color","onClick","negative","as","toUsername","amount","currency","_c","$RefreshReg$"],"sources":["/Users/timurinamkhojayev/Desktop/demo-crypto/order-ui/src/components/user/ScanQR.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import { Container, Message, Segment, Header, Button } from 'semantic-ui-react';\n// import jsQR from 'jsqr';\n// import { useAuth } from '../context/AuthContext';\n// import { backApi } from '../misc/BackApi';\n// import { handleLogError } from '../misc/Helpers';\n// import { useNavigate } from 'react-router-dom';\n//\n// const ScanQR = () => {\n//     const { getUser } = useAuth();\n//     const navigate = useNavigate();\n//     const [error, setError] = useState(null);\n//     const [transactionDetails, setTransactionDetails] = useState(null);\n//     const [scanning, setScanning] = useState(false);\n//     const videoRef = useRef(null);\n//\n//     const handleScanQR = () => {\n//         setScanning(true);\n//         setError(null);\n//         setTransactionDetails(null);\n//     };\n//\n//     useEffect(() => {\n//         handleScanQR();\n//     }, []);\n//\n//     useEffect(() => {\n//         if (scanning) {\n//             const canvas = document.createElement('canvas');\n//             const context = canvas.getContext('2d');\n//             const video = videoRef.current;\n//\n//             navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } }).then(stream => {\n//                 video.srcObject = stream;\n//                 video.setAttribute('playsinline', true);\n//                 video.play();\n//\n//                 const scan = () => {\n//                     if (video.readyState === video.HAVE_ENOUGH_DATA) {\n//                         canvas.height = video.videoHeight;\n//                         canvas.width = video.videoWidth;\n//                         context.drawImage(video, 0, 0, canvas.width, canvas.height);\n//\n//                         const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n//                         const code = jsQR(imageData.data, imageData.width, imageData.height);\n//\n//                         if (code) {\n//                             try {\n//                                 const transactionData = JSON.parse(code.data);\n//                                 setTransactionDetails(transactionData);\n//                                 stream.getTracks().forEach(track => track.stop());\n//                                 setScanning(false);\n//                                 navigate('/confirm-transaction', { state: { transactionDetails: transactionData } });\n//                             } catch (e) {\n//                                 setError('Failed to parse QR code data');\n//                             }\n//                         }\n//                     }\n//                     if (scanning) {\n//                         requestAnimationFrame(scan);\n//                     }\n//                 };\n//                 scan();\n//             }).catch(err => setError(err.message));\n//         }\n//     }, [scanning, navigate]);\n//\n//     const handleBack = () => {\n//         navigate(-1); // Go back to the previous page\n//     };\n//\n//     return (\n//         <Container>\n//             <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'auto' }}>\n//                 {scanning && (\n//                     <div style={{ border: '2px solid #7F00FF', padding: '25px', borderRadius: '15px' }}>\n//                         <video ref={videoRef} style={{ width: '400px', height: 'auto', borderRadius: '10px' }} />\n//                     </div>\n//                 )}\n//             </div>\n//             <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}>\n//                 <Button color='violet' onClick={handleBack}>Отменить</Button>\n//             </div>\n//             {error && <Message negative>{error}</Message>}\n//             {transactionDetails && (\n//                 <Segment>\n//                     <Header as=\"h3\">Transaction Details</Header>\n//                     <p><strong>To Username:</strong> {transactionDetails.toUsername}</p>\n//                     <p><strong>Amount:</strong> {transactionDetails.amount}</p>\n//                     <p><strong>Currency:</strong> {transactionDetails.currency}</p>\n//                     <Button color='violet' onClick={() => navigate('/confirm-transaction', { state: { transactionDetails } })}>Confirm Transaction</Button>\n//                 </Segment>\n//             )}\n//         </Container>\n//     );\n// };\n//\n// export default ScanQR;\nimport React, { useState, useRef } from 'react';\nimport { Container, Message, Segment, Header, Button } from 'semantic-ui-react';\nimport QrScanner from 'react-qr-scanner';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n\nconst ScanQR = () => {\n    const { getUser } = useAuth();\n    const navigate = useNavigate();\n    const [error, setError] = useState(null);\n    const [transactionDetails, setTransactionDetails] = useState(null);\n    const [scanning, setScanning] = useState(true);\n\n    const handleScan = data => {\n        if (data) {\n            try {\n                const transactionData = JSON.parse(data.text);\n                setTransactionDetails(transactionData);\n                setScanning(false);\n                navigate('/confirm-transaction', { state: { transactionDetails: transactionData } });\n            } catch (e) {\n                setError('Failed to parse QR code data');\n            }\n        }\n    };\n\n    const handleError = err => {\n        setError(err.message);\n    };\n\n    const handleBack = () => {\n        navigate(-1); // Go back to the previous page\n    };\n\n    return (\n        <Container>\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'auto' }}>\n                {scanning && (\n                    <div style={{ border: '2px solid #7F00FF', padding: '25px', borderRadius: '15px' }}>\n                        <QrScanner\n                            delay={300}\n                            onError={handleError}\n                            onScan={handleScan}\n                            style={{ width: '400px', height: 'auto', borderRadius: '10px' }}\n                        />\n                    </div>\n                )}\n            </div>\n            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}>\n                <Button color='violet' onClick={handleBack}>Отменить</Button>\n            </div>\n            {error && <Message negative>{error}</Message>}\n            {transactionDetails && (\n                <Segment>\n                    <Header as=\"h3\">Transaction Details</Header>\n                    <p><strong>To Username:</strong> {transactionDetails.toUsername}</p>\n                    <p><strong>Amount:</strong> {transactionDetails.amount}</p>\n                    <p><strong>Currency:</strong> {transactionDetails.currency}</p>\n                    <Button color='violet' onClick={() => navigate('/confirm-transaction', { state: { transactionDetails } })}>Confirm Transaction</Button>\n                </Segment>\n            )}\n        </Container>\n    );\n};\n\nexport default ScanQR;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}